plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.0'
    id 'dev.fritz2.fritz2-gradle' version '0.7.1'
}

repositories {
    jcenter()
    mavenCentral()
}

def ktor_version = '1.4.0'
def logback_version = '1.2.3'
def serialization_version = '1.0.0-RC'
def exposed_version = '0.25.1'
def h2_version = '1.4.200'

kotlin {
    jvm {
        compilations.main {
            tasks.getByName(processResourcesTaskName) {
                dependsOn(jsBrowserWebpack)
//                    from(new File(jsBrowserWebpack.name, jsBrowserWebpack.outputPath))
            }
        }
    }
    js().browser()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-auth:$ktor_version"
                implementation "io.ktor:ktor-client-apache:$ktor_version"
                implementation "io.ktor:ktor-serialization:$ktor_version"
                implementation "io.ktor:ktor-gson:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"

                implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
                implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
                implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
                implementation "com.h2database:h2:$h2_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

// copies the compile js file to static resources
jvmJar {
    dependsOn(jsBrowserProductionWebpack)
    from(new File(jsBrowserProductionWebpack.entry.name, jsBrowserProductionWebpack.outputPath))
}

task run(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "app.backend.ServerKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}